#+TITLE: Modeline setup
#+AUTHOR: Steve Lane
#+DESCRIPTION: A description of my current modeline setup.
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :tangle yes

* Introduction

This file provides details on my current =modeline= setup. It is intended as a literate programming approach to structure my =modeline= setup.

If you want to use some (all) of this setup, you'll need to change directories appropriately. You can tangle this file to Emacs lisp using =C-c C-v C-t=, which will create org-setup.el in the same folder as this file. You can then source this in your init.el file. Or, use

#+BEGIN_SRC emacs-lisp :exports none :tangle no
  (org-babel-load-file "~/.emacs.d/modeline-setup.org")
#+END_SRC

I've got a couple of different setups here. To use a particular setup, make sure it has =:tangle yes= in the header arguments.

* Spaceline

The following modeline uses the spacemacs modeline, [[https://github.com/TheBB/spaceline][spaceline]]. Because I'm on a mac, the colours get stuffed up, so the =powerline-image-apple-rgb= setting fixes that (found [[https://emacs.stackexchange.com/questions/14984/emacs-powerline-inconsistent-colors-behind-arrows][here]]):

#+BEGIN_SRC emacs-lisp :exports none :tangle yes
  (use-package spaceline
    :ensure t
    :init
    ;; (setq powerline-default-separator 'utf-8)
    ;; (setq powerline-image-apple-rgb t)
    :config
    ;; (require 'spaceline-config)
    ;; (spaceline-emacs-theme)
    )

#+END_SRC

The separator uses =utf-8=, you can check what others are available, e.g. =C-h v powerline-default-separator=.

** Bling it up

Using =all-the-icons= we can bling things up a bit:

#+BEGIN_SRC emacs-lisp :exports none :tangle yes
  (use-package all-the-icons
    :ensure t
    :defer t
    )

  (use-package spaceline-all-the-icons
    :ensure t
    :config
    (spaceline-all-the-icons-theme)
    (spaceline-all-the-icons--setup-neotree)
    (setq spaceline-all-the-icons-hide-long-buffer-path t)
    (setq spaceline-all-the-icons-slim-render t)

    ;; Effort segment
    (spaceline-define-segment sl/my-org-effort
      "An `all-the-icons' segment to display the current org-clock task."
      (let ((face `(:height ,(spaceline-all-the-icons--height 0.9) :inherit)))
	(propertize
	 (concat
	  (propertize (all-the-icons-faicon "check-circle" :v-adjust 0.1)
		      'face `(:height ,(spaceline-all-the-icons--height 1.1) :family ,(all-the-icons-faicon-family) :inherit))
	  " "
	  (propertize (truncate-string-to-width (org-clock-get-clock-string) 30 nil nil "â€¦")
		      'face face
		      'display '(raise 0.1)))
	 'help-echo "Go to task"
	 'mouse-face (spaceline-all-the-icons--highlight)
	 'local-map (make-mode-line-mouse-map 'mouse-1 #'org-clock-goto)))
      :when (and active
		 (bound-and-true-p org-clock-current-task)))

    ;; Turn off an options
    (spaceline-toggle-all-the-icons-projectile-off)
    (spaceline-toggle-all-the-icons-hud-off)
    (spaceline-toggle-all-the-icons-org-clock-current-task-off)
    ;; Enable my segment
    (spaceline-all-the-icons-theme 'sl/my-org-effort)
    )
#+END_SRC

Here, the theme is set, and some options to make things a little slimmer.

Take a look at the =sl/my-org-effort= segment definition. This comes straight from the source (=spaceline-all-the-icons-segments.el=) for the =all-the-icons-org-clock-current-task= segment. I've just replaced the =org-clock-current-task= with a call to =(org-clock-get-clock-string)= which is what is used in the standard modeline---that function displays the time spent, as well as the effort allowed, which is good info I reckon.

* moody/minions

The following setup is taken directly from [[https://github.com/tarsius/moody][moody github]] and [[https://github.com/tarsius/minions][tarsius github]]. No configuration at the moment.

#+BEGIN_SRC emacs-lisp :exports none :tangle no
  (use-package moody
    :ensure t
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)
    )

  (use-package minions
    :ensure t
    :pin melpa-stable
    :config (minions-mode 1)
    )
#+END_SRC
