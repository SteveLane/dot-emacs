#+TITLE: Org setup
#+AUTHOR: Steve Lane
#+DESCRIPTION: A description of my current org setup. This is a literate file which can be tangled to the source required to mimic my org setup.
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :tangle yes

* Introduction

This file provides details on my current =org= setup. It is intended as a literate programming approach to structure my =org= setup. It may work, or it may not (!) but I thought I'd give it a go.

If you want to use some (all) of this setup, you'll need to change directories appropriately. You can tangle this file to Emacs lisp using =C-c C-v C-t=, which will create org-setup.el in the same folder as this file. You can then source this in your init.el file.

This setup has been greatly influenced by [[http://cachestocaches.com/2016/9/my-workflow-org-agenda/][Gregory Stein]] (GS) and in turn by [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] (BH). You should check out those great resources.

* Initial setup

# The first piece of infrastructure I'm going to use is =use-package= to make sure org is loaded, and to set up some general keybindings. I also make sure that all-the-icons is loaded/installed for some bling! I want to make sure that org files have poly-org-mode, and some general editing stuff. *Edit*: poly-org-mode interferes with capturing tasks ([[https://github.com/vspinu/polymode/issues/40][see here]]). For now, I've disabled poly-org-mode for org files.

First up, we'll add a block to load all this org config after spacemacs starts, else we'll get conflicts. If you're following along at home, don't forget to complete the block at the end of the file.

#+begin_src emacs-lisp :exports none
  (with-eval-after-load 'org
#+end_src

#+BEGIN_SRC emacs-lisp :exports none

  ;; keybindings
  ;; (global-set-key (kbd "C-c a") 'org-agenda)
  ;; (global-set-key (kbd "C-c c") 'org-capture)
  ;; (global-set-key (kbd "C-c l") 'org-store-link)

  ;; ;; soft line wrapping
  (add-hook 'org-mode-hook (lambda () (visual-line-mode 1)))
  ;; Disable whitespace mode in org mode
  (add-hook 'org-mode-hook (lambda () (whitespace-mode -1)))
  ;; Flyspell on
  (add-hook 'org-mode-hook (lambda () (flyspell-mode 1)))

#+END_SRC

* Where do I store stuff?

The default directory for org files is ~/org, but I'll change this to a sub-directory of my github. When I capture tasks/notes (=C-c t= / =C-c n=), I'm going to have them sent to the ~/github/org/refile.org file, when I can refile them at my convenience. This saves time when capturing TODO items, as it means I don't have to decide which project they'll go into straight away. Speaking of, when it comes time to refile, these can be put into separate project files; the refile-targets allows the nesting to be searched. Finally, I set the agenda from the default org directory.

#+BEGIN_SRC emacs-lisp :export yes
  (setq
   ;; Default directory for org files
   org-directory "~/github/org"
   ;; Directory for notes/tasks to be refiled
   org-default-notes-file (concat org-directory "/refile.org")
   org-journal-file (concat org-directory "/journal-club.org")
   ;; Allows to store agenda files in their appropriate files.
   ;; This is useful when per project task lists are used.
   ;; Only show level 1 headings for refiling (level 2 are the task headers)
   org-refile-targets (quote ((nil :maxlevel . 2)
              (org-agenda-files :maxlevel . 2)))
   ;; Org agenda files read from here
   org-agenda-files (list org-directory)
   )
#+END_SRC

I spoke above about refiling. Here's where I set that up. I'm telling org to use the filename and the headers (so a level 2 header will be filename/level1/level2). complete-in-steps nil means that we can use helm/ivy to provide nice completion, and finally allow the creation of parent headers (with confirmation).

#+BEGIN_SRC emacs-lisp :export yes
  (setq
   ;; Be sure to use the full path for refile setup
   org-refile-use-outline-path 'file
   ;; Set this to nil to use helm/ivy for completion
   org-outline-path-complete-in-steps nil
   ;; Allow refile to create parent tasks with confirmation
   org-refile-allow-creating-parent-nodes 'confirm
   )

#+END_SRC

* How do I capture stuff?

I now need to set up _capture templates_. When I go to capture a task/note etc, I am presented with the options listed below.

** Task categories

I'm migrating/supplementing a BuJo. The following provides my current 'bullets' from my BuJo, translated to an org setup. What the code does is define the TODO keywords, and the transition between them. Keywords to the left of the =|= are in a state of 'not done' whilst those on the right are done.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp :export yes
  (setq org-todo-keywords
  (quote ((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "TODAY(T)" "|" "DONE(d)")
          (sequence "PROJECT(p)" "|" "DONE(d)" "CANCELLED(c)")
          (sequence "WAITING(w)" "|")
          (sequence "|" "CANCELLED(c)")
          (sequence "SOMEDAY(s)" "|" "CANCELLED(c)")
          (sequence "|" "MEETING")
          )
         )
  )
#+END_SRC

My BuJo is pretty simple, I've mapped it as follows:

- todo :: (t) this is the standard task/todo item, which can be marked done
- waiting :: (w) this keyword is added to a task when I'm waiting to hear back from someone before progressing the task
- cancelled :: (c) pretty self-explanatory ...
- someday :: (s) this is for tasks that I may want to do at some stage, but not just yet. I still want to keep track of them though.
- project :: (p) I'm using as a top-level to keep a track of projects.

On top of this, I'm going to try and use GS/BH's keyword:

- meeting :: This will be used for 'true' meetings, as well as any other interruptions that may carry on for a long time...

*** Colours for the agenda

When we display these in the agenda, we'd also like to have different colours for different keywords:

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp :export no
  (setq
   ;; Coloured faces for agenda/todo items
   org-todo-keyword-faces
   '(
     ("DONE" . (:foreground "#2B4450" :weight bold))
     ("TODO" . (:foreground "#ff3030" :weight bold))
     ("WAITING" . (:foreground "#fe2f92" :weight bold))
     ("CANCELLED" . (:foreground "#999999" :weight bold))
     ("SOMEDAY" . (:foreground "#ab82ff" :weight bold))
     ("MEETING" . (:foreground "#1874cd" :weight bold))
     )
   )
#+END_SRC

** Capture templates

The following code provides the capture templates when I add TODO tasks. Best place to check how these work is the help for that variable. You can find the help for a variable by placing the cursor over the variable and entering =C-h v= (help for variable). To make sure that folded views keep some space between headers, we set the separator-lines variable.

#+header: :tangle yes
#+BEGIN_SRC emacs-lisp :export yes
  (setq
   ;; Define the custum capture templates
   org-capture-templates
   '(("t" "todo" entry (file org-default-notes-file)
      "* TODO %?\n%u\n%a\n" )
     ("m" "Meeting/Interruption" entry (file org-default-notes-file)
      "* MEETING with %? :MEETING:\n%t" )
     ;; ("d" "Diary" entry (file+datetree "~/org/diary.org")
     ;;  "* %?\n%U\n" )
     ("i" "Idea" entry (file org-default-notes-file)
      "* %? :IDEA: \n%t\n" )
     ;; ("n" "Next task" entry (file+headline org-default-notes-file "Tasks")
     ;;  "** NEXT %? \nDEADLINE: %t")
     ("e" "Respond email" entry (file org-default-notes-file)
      "* TODO Respond to %:from on %:subject :EMAIL: \nSCHEDULED: %t\n%U\n%a\n"  :immediate-finish t)
     ("s" "Someday" entry (file org-default-notes-file)
      "* SOMEDAY %? :SOMEDAY: \n%u\n"  :empty-lines 1)
     ("p" "Project entry" entry (file org-default-notes-file)
      "* PROJECT %? :PROJECT: \n%u\n"  :empty-lines 1)
     ("j" "Journal Club" entry (file org-journal-file)
      "* DETAILS: %? :JOURNAL CLUB: \n%u\n"  :empty-lines 1)
     )
   ;; Keep a line between headers
   org-cycle-separator-lines 1
   )
#+END_SRC

** Tagging tasks

Extensibility is provided by tagging. You can tag on the fly, or use a predefined list. Below I set a predefined list. Everything between =:startgroup= =:endgroup= below is a single tag for that task---i.e. you can only choose one. =?= gives the shortcut to add the tag.

#+BEGIN_SRC emacs-lisp :export yes
  ;; Custom tags
  (setq org-tag-alist '((:startgroup . nil)
  			("@work" . ?w)
  			("@train" . ?t)
  			("@home" . ?h)
  			(:endgroup . nil)
  			("research" . ?r)
  			("coding" . ?c)
  			("writing" . ?p)
  			("emacs" . ?e)
			("miscellaneous" . ?m)
			("supervision" . ?s)
  			)
  	)

#+END_SRC

** Automatic tagging of tasks.

Tasks can have automatic actions taken to tag them. Following BH, I'm using the following triggers:

- moving a task to CANCELLED adds a :CANCELLED: tag
- moving a task to a done state removes cancelled tags

#+BEGIN_SRC emacs-lisp :export yes
  (setq
   ;; Triggers for state changes
   org-todo-state-tags-triggers
   (quote (
	   ;; Move to cancelled adds the cancelled tag
	   ("CANCELLED" ("CANCELLED" . t))
	   ;; Move to waiting adds the waiting tag
	   ("WAITING" ("WAITING" . t))
	   ;; Move to a done state removes waiting/cancelled
	   (done ("WAITING") ("CANCELLED"))
	   ("DONE" ("WAITING") ("CANCELLED"))
	   ;; Move to todo, removes waiting/cancelled
	   ("TODO" ("WAITING") ("CANCELLED"))
	   )
	  )
   )
#+END_SRC

** Finishing tasks

To make sure that tasks with child tasks are not completed prematurely:

#+BEGIN_SRC emacs-lisp :export yes
  (setq
   ;; Ensure child dependencies complete before parents can be marked complete
   org-enforce-todo-dependencies t
   )

#+END_SRC

** Archiving

We'll want to move stuff out of our agenda tree at some stage. This sets up our archiving to go into the archive sub-directory:

#+BEGIN_SRC emacs-lisp :export yes
  (setq
   ;; Where I'm going to archive stuff
   org-archive-location "archive/%s_archive::"
   )

  ;; How archive files will appear
  (defvar org-archive-file-header-format "#+FILETAGS: ARCHIVE\nArchived entries from file %s\n")

#+END_SRC

* Effort

When setting up a task, you can add effort estimates for billing/budgeting, and tracking how you're going with your tasks. Apparently the best way to set effort is by using [[info:org#Effort%20estimates][column view]]. Next I define the columns to display (and their widths), and also provide default effort values.

Related to this is how tasks are clocked. If I clock-in and clock-out immediately (such as when capturing an email), I shouldn't record that clock.

#+BEGIN_SRC emacs-lisp :export yes
  (setq
   ;; Set column view headings
   org-columns-default-format "%50ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM"
   ;; Set default effort values
   org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")))
   ;; When there's 0 time spent, remove the entry
   org-clock-out-remove-zero-time-clocks t
   )

#+END_SRC


* Bling

I wanted some bling! I added the all-the-icons requirement above, now the next block of code sets some bling in the agenda:

#+BEGIN_SRC emacs-lisp :export yes
  (setq org-agenda-category-icon-alist
	`(("TODO" (list (all-the-icons-faicon "tasks")) nil nil :ascent center)))
  ;; (setq
   ;; Add fancy icons to the agenda...
   ;; org-agenda-category-icon-alist
   ;; '(
   ;;   (("TODO" (#("" 0 1 (font-lock-ignore t rear-nonsticky t display (raise -0.24) face (:family "FontAwesome" :height 1.2)))) nil nil :ascent center))
   ;;   ;; (`(("MEETING" ,(list (all-the-icons-faicon "tasks")) nil nil :ascent center)))
   ;;   )
   ;; )

#+END_SRC

* Habits

Habits allows some recurring tasks to reappear when marked done. See [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][here]] for some good info. To enable habits, you need to load the =org-habits= module into org, which is achieved with the following:

#+BEGIN_SRC emacs-lisp :export yes
  (add-to-list 'org-modules 'org-habit t)
#+END_SRC

Finally close off the =with=eval-after-load= from earlier:
#+begin_src emacs-lisp :exports none
  )
#+end_src
* Agenda View

The default agenda lacks a little oomph. What I'd like to see is collections such as:

- tasks for today
- tasks to be refiled
- tasks for next week
- tasks that are unscheduled
- tasks that are waiting/someday

This next bit of setup uses [[https://github.com/alphapapa/org-super-agenda][~org-super-agenda~]] to set up a nicely grouped agenda:

#+BEGIN_SRC emacs-lisp :export yes
  (setq org-agenda-custom-commands
        '(("a" "Super Agenda"
           ((agenda "" ((org-agenda-span 'day)
                        (org-agenda-overriding-header "Today's Items")
                        (org-super-agenda-groups
                         '((:discard (:todo "DONE"))
                           (:discard (:tag "MEETING"))
                           (:name "Today"
                                  :time-grid t
                                  :todo "TODAY"
                                  :scheduled today
                                  :order 0)
                           (:habit t)
                           (:name "Due Today"
                                  :deadline today
                                  :order 2)
                           (:name "Due Soon"
                                  :deadline future
                                  :order 8)
                           (:name "Overdue"
                                  :deadline past
                                  :order 7)
                           ))))
            (todo "" ((org-agenda-overriding-header "All Other TODOs")
                      (org-super-agenda-groups
                       '((:and (:deadline nil :scheduled nil))
                         (:discard (:scheduled t))
                         (:auto-category t :order 9)
                         ))))))
          ("t" "Todo View"
           (
            (todo "" ((org-agenda-overriding-header "")
                      (org-super-agenda-groups
                       '((:name "Inbox"
                                :file-path "inbox"
                                :order 0
                                )
                         (:auto-category t
                                         :order 9)
                         ))))))
          ))

  (org-super-agenda-mode);; Custom agenda views

  ;; (with-eval-after-load 'org-agenda
  ;;   (setq org-agenda-custom-commands
  ;;         '(				; start list
  ;;           (" " "Agenda" ((agenda "" ((org-agenda-overriding-header "Today's Schedule:")
  ;;                                      (org-agenda-span 'day)
  ;;                                      (org-agenda-ndays 1)
  ;;                                      (org-agenda-start-on-weekday nil)
  ;;                                      (org-agenda-start-day "+0d")
  ;;                                      ;; Remove refiling tasks (https://www.reddit.com/r/orgmode/comments/69acg5/orgagendaskipentryif_but_for_categories/)
  ;;                                      (org-agenda-skip-function '(cond ((equal (file-name-nondirectory (buffer-file-name)) "refile.org")
  ;;                                                                        (outline-next-heading) (1- (point)))
  ;;                                                                       (t (org-agenda-skip-entry-if 'todo 'done))
  ;;                                                                       ))
  ;;                                      ;; (org-agenda-skip-entry-if 'todo 'done)
  ;;                                      (org-agenda-todo-ignore-deadlines nil)))
  ;;                          ;; Project tickle list.
  ;;                          (todo "PROJECT" ((org-agenda-overriding-header "Project list:")
  ;;                                           (org-tags-match-list-sublevels nil)))
  ;;                          ;; Refiling category set file wide in file.
  ;;                          (tags "REFILING" ((org-agenda-overriding-header "Tasks to Refile:")
  ;;                                            (org-tags-match-list-sublevels nil)))
  ;;                          ;; Tasks upcoming (should be similar to above?)
  ;;                          (agenda "" ((org-agenda-overriding-header "Upcoming:")
  ;;                                      (org-agenda-span 7)
  ;;                                      (org-agenda-start-day "+1d")
  ;;                                      (org-agenda-start-on-weekday nil)
  ;;                                      (org-agenda-skip-function '(cond ((equal (file-name-nondirectory (buffer-file-name)) "refile.org")
  ;;                                                                        (outline-next-heading) (1- (point)))
  ;;                                                                       (t (org-agenda-skip-entry-if 'todo 'done))
  ;;                                                                       ))
  ;;                                      ;; I should set this next one to true, so that deadlines are ignored...?
  ;;                                      (org-agenda-todo-ignore-deadlines nil)))
  ;;                          ;; Tasks that are unscheduled
  ;;                          (todo "TODO" ((org-agenda-overriding-header "Unscheduled Tasks:")
  ;;                                        (org-tags-match-list-sublevels nil)
  ;;                                        ;; (org-agenda-skip-entry-if 'scheduled 'deadline)
  ;;                                        (org-agenda-todo-ignore-scheduled 'all)
  ;;                                        ))
  ;;                          ;; Tasks that are waiting or someday
  ;;                          (todo "WAITING|SOMEDAY" ((org-agenda-overriding-header "Waiting/Someday Tasks:")
  ;;                                                   (org-tags-match-list-sublevels nil)))
  ;;                          )
  ;;            )
  ;;           )				; end list

  ;;         ;; If an item has a (near) deadline, and is scheduled, only show the deadline.
  ;;         org-agenda-skip-scheduled-if-deadline-is-shown t
  ;;         )
  ;;   )
#+END_SRC

The last line only shows one copy of the task---without it, both the scheduled, and the deadline task will show up.

2019-01-14: I've now added a new 'task' view in the custom agenda above. This is to list all projects that I have a hand in, just to keep me on track. I've added a new keyword 'PROJECT' to do this, which can be marked as DONE once the whole project is completed or cancelled.

* Projectile support

Each project can have it's own TODO file, which will make it heaps easier to track tasks. These are not added to the agenda by default, so we can add by:

#+begin_src emacs-lisp :export yes
  (with-eval-after-load 'org-agenda
    (require 'org-projectile)
    (mapcar #'(lambda (file)
               (when (file-exists-p file)
                 (push file org-agenda-files)))
            (org-projectile-todo-files)))
#+end_src

these details come from the spacemacs page: [[https://develop.spacemacs.org/layers/+emacs/org/README.html][org layer README]].
